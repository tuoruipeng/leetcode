{"id":2320,"fid":"2200","name":"找出数组中的所有 K 近邻下标","slug":"find-all-k-distant-indices-in-an-array","link":"https://leetcode.cn/problems/find-all-k-distant-indices-in-an-array/description/","percent":62.82097931177877,"level":"Easy","category":"algorithms","en_name":"Find All K-Distant Indices in an Array","cn_name":"找出数组中的所有 K 近邻下标","totalAC":"23.9K","totalSubmit":"38.2K","likes":35,"dislikes":0,"desc":"<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 和两个整数 <code>key</code> 和 <code>k</code> 。<strong>K 近邻下标</strong> 是 <code>nums</code> 中的一个下标 <code>i</code> ，并满足至少存在一个下标 <code>j</code> 使得 <code>|i - j| &lt;= k</code> 且 <code>nums[j] == key</code> 。</p>\n\n<p>以列表形式返回按 <strong>递增顺序</strong> 排序的所有 K 近邻下标。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [3,4,9,1,3,9,5], key = 9, k = 1\n<strong>输出：</strong>[1,2,3,4,5,6]\n<strong>解释：</strong>因此，<code>nums[2] == key</code> 且 <code>nums[5] == key</code>。\n- 对下标 0 ，<code>|0 - 2| &gt; k</code> 且 <code>|0 - 5| &gt; k</code>，所以不存在 <code>j</code> 使得 <code>|0 - j| &lt;= k</code> 且 <code>nums[j] == key</code>。所以 0 不是一个 K 近邻下标。\n- 对下标 1 ，<code>|1 - 2| &lt;= k</code> 且 <code>nums[2] == key</code>，所以 1 是一个 K 近邻下标。\n- 对下标 2 ，<code>|2 - 2| &lt;= k</code> 且 <code>nums[2] == key</code>，所以 2 是一个 K 近邻下标。\n- 对下标 3 ，<code>|3 - 2| &lt;= k</code> 且 <code>nums[2] == key</code>，所以 3 是一个 K 近邻下标。\n- 对下标 4 ，<code>|4 - 5| &lt;= k</code> 且 <code>nums[5] == key</code>，所以 4 是一个 K 近邻下标。\n- 对下标 5 ，<code>|5 - 5| &lt;= k</code> 且 <code>nums[5] == key</code>，所以 5 是一个 K 近邻下标。\n- 对下标 6 ，<code>|6 - 5| &lt;= k</code> 且 <code>nums[5] == key</code>，所以 6 是一个 K 近邻下标。\n因此，按递增顺序返回 [1,2,3,4,5,6] 。 \n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,2,2,2,2], key = 2, k = 2\n<strong>输出：</strong>[0,1,2,3,4]\n<strong>解释：</strong>对 <code>nums</code> 的所有下标 i ，总存在某个下标 j 使得 <code>|i - j| &lt;= k</code> 且 <code>nums[j] == key</code>，所以每个下标都是一个 K 近邻下标。 \n因此，返回 [0,1,2,3,4] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>key</code> 是数组 <code>nums</code> 中的一个整数</li>\n\t<li><code>1 &lt;= k &lt;= nums.length</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> findKDistantIndices(vector<int>& nums, int key, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<Integer> findKDistantIndices(int[] nums, int key, int k) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findKDistantIndices(self, nums, key, k):\n        \"\"\"\n        :type nums: List[int]\n        :type key: int\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findKDistantIndices(self, nums: List[int], key: int, k: int) -> List[int]:\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findKDistantIndices(int* nums, int numsSize, int key, int k, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<int> FindKDistantIndices(int[] nums, int key, int k) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} key\n * @param {number} k\n * @return {number[]}\n */\nvar findKDistantIndices = function(nums, key, k) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function findKDistantIndices(nums: number[], key: number, k: number): number[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $key\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function findKDistantIndices($nums, $key, $k) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findKDistantIndices(_ nums: [Int], _ key: Int, _ k: Int) -> [Int] {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findKDistantIndices(nums: IntArray, key: Int, k: Int): List<Int> {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> findKDistantIndices(List<int> nums, int key, int k) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func findKDistantIndices(nums []int, key int, k int) []int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} key\n# @param {Integer} k\n# @return {Integer[]}\ndef find_k_distant_indices(nums, key, k)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findKDistantIndices(nums: Array[Int], key: Int, k: Int): List[Int] = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_k_distant_indices(nums: Vec<i32>, key: i32, k: i32) -> Vec<i32> {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-k-distant-indices nums key k)\n  (-> (listof exact-integer?) exact-integer? exact-integer? (listof exact-integer?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_k_distant_indices(Nums :: [integer()], Key :: integer(), K :: integer()) -> [integer()].\nfind_k_distant_indices(Nums, Key, K) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_k_distant_indices(nums :: [integer], key :: integer, k :: integer) :: [integer]\n  def find_k_distant_indices(nums, key, k) do\n    \n  end\nend"},{"value":"cangjie","text":"Cangjie","defaultCode":"class Solution {\n    func findKDistantIndices(nums: Array<Int64>, key: Int64, k: Int64): ArrayList<Int64> {\n\n    }\n}"}],"testcase":"[3,4,9,1,3,9,5]\n9\n1","testable":true,"templateMeta":{"name":"findKDistantIndices","params":[{"name":"nums","type":"integer[]"},{"type":"integer","name":"key"},{"type":"integer","name":"k"}],"return":{"type":"list<integer>"}}}