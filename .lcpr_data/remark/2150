{"data":[{"name":"2025-06-26 10:06:15","id":1750903575573,"body":"二分查找：我们可以在可能的乘积范围内进行二分查找，对于每一个中间值，计算有多少个乘积小于等于它。\n\n计数函数：对于给定的中间值，我们需要高效地计算两个数组中乘积小于等于该值的组合数量。\n\n处理不同符号情况：由于数组可能包含负数，我们需要根据元素的符号不同情况分别处理。"},{"name":"2025-06-26 10:07:20","id":1750903640609,"body":"countLessOrEqual函数：这个函数计算两个数组中乘积小于等于给定值mid的组合数量。对于每个nums1中的元素，根据其正负性使用不同的二分查找策略：\n\n如果nums1[i]为正，则在nums2中寻找最大的j使得乘积<=mid。\n\n如果nums1[i]为负，则在nums2中寻找最小的j使得乘积<=mid。\n\n如果nums1[i]为零，则所有nums2中的元素与之相乘结果为零，直接根据mid是否>=0来决定是否全部计入。\n\nkthSmallestProduct函数：使用二分查找来确定第k小的乘积。初始化左右边界为极大和极小值，然后通过不断调整边界来逼近正确的乘积值，每次通过countLessOrEqual函数来检查中间值是否满足条件。\n\n这种方法有效地将问题转化为二分查找问题，利用有序数组的性质高效地统计满足条件的乘积数量，从而在O(n log m log (max_product))的时间复杂度内解决问题。"}]}